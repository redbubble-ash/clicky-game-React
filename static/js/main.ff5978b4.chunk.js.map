{"version":3,"sources":["components/Wrapper/index.js","components/Card/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Card","onClick","clickCount","id","alt","name","src","image","Header","score","highscore","App","state","cards","topScore","clickedImage","shuffleImage","_this","sort","b","Math","random","clickedAllImage","endGame","setState","event","currentImageId","target","includes","push","console","log","_this2","this","components_Wrapper","components_Header","map","card","components_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u8DAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCO1BC,MARf,SAAcN,GACZ,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOG,QAASP,EAAMQ,YAC1CP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKM,GAAIT,EAAMS,GAAIC,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,iBCQtCC,MAXf,SAAgBd,GACZ,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACtBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMK,UAC9BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACUJ,EAAMe,MADhB,eACmCf,EAAMgB,oBC2F9BC,6MAzFbC,MAAQ,CACNC,QACAJ,MAAM,EACNK,SAAS,EACTC,aAAc,MAIhBC,aAAe,kBAAMC,EAAKL,MAAMC,MAAMK,KAAK,SAACtB,EAAEuB,GAAH,OAASC,KAAKC,SAAS,QAGlEC,gBAAkB,WACQ,KAArBL,EAAKL,MAAMH,QACZQ,EAAKD,eACLC,EAAKM,cAKTA,QAAU,WACRN,EAAKO,SAAS,CACdf,MAAM,EACNM,aAAa,QAKfb,WAAa,SAAAuB,GAEX,IAAMC,EAAiBD,EAAME,OAAOxB,GAGpBc,EAAKL,MAAMG,aAAaa,SAASF,IA6B7CT,EAAKD,eACLC,EAAKM,YAzBLN,EAAKL,MAAMG,aAAac,KAAKH,GAI7BT,EAAKO,SAAS,CACZT,aAAaE,EAAKL,MAAMG,aAExBN,MAAOQ,EAAKL,MAAMH,MAAO,EACzBK,SAAWG,EAAKL,MAAMH,MAAO,GAAKQ,EAAKL,MAAME,SAAWG,EAAKL,MAAMH,MAAO,EAAIQ,EAAKL,MAAME,WAM3FG,EAAKD,eAGLC,EAAKK,kBAELQ,QAAQC,IAAId,EAAKL,MAAME,UACvBgB,QAAQC,IAAIL,GACZI,QAAQC,IAAId,EAAKL,MAAMG,wFAYpB,IAAAiB,EAAAC,KACP,OACEtC,EAAAC,EAAAC,cAACqC,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,eAAgBF,KAAKrB,MAAMH,MAA3B,cAA6CwB,KAAKrB,MAAME,UACvDmB,KAAKrB,MAAMC,MAAMuB,IAAI,SAAAC,GAAI,OACxB1C,EAAAC,EAAAC,cAACyC,EAAD,CACEpC,WAAY8B,EAAK9B,WACjBC,GAAIkC,EAAKlC,GACToC,IAAKF,EAAKlC,GACVE,KAAMgC,EAAKhC,KACXE,MAAO8B,EAAK9B,kBAlFNiC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ff5978b4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n  return <div className=\"card\" onClick={props.clickCount}>\r\n    <div className=\"img-container\">\r\n      <img id={props.id} alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n    return <div className=\"header\">\r\n    <div className=\"title\">{props.children}</div>\r\n    <div className=\"scores\">\r\n      Score: {props.score} Highscore: {props.highscore}\r\n    </div>\r\n  </div>\r\n\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    cards,\n    score:0,\n    topScore:0,\n    clickedImage: []\n  };\n\n  // Shuffle/resort the images\n  shuffleImage = () => this.state.cards.sort((a,b) => Math.random()-0.5);\n\n  // if user gets to all 12, shuffle the cards and reset the game\n  clickedAllImage = () => {\n    if(this.state.score === 12){\n      this.shuffleImage();\n      this.endGame();\n    }\n  }\n \n  //reset function to reset score and clickedImage array when the game is over\n  endGame = () => {\n    this.setState({\n    score:0,\n    clickedImage:[]\n    })\n  }\n  \n\n  clickCount = event =>{\n    // grab the id of the clicked image\n    const currentImageId = event.target.id;\n    \n     // check to see if that image has been clicked/saved or not, are they in the state array clickedImage?\n    const ifSaved = this.state.clickedImage.includes(currentImageId);\n\n    // if the clicked item is not in clickedImage, then it hasn't been clicked and the score is increased\n      if (!ifSaved){\n       // adds the clicked item to clickedImage to track that it has been clicked\n        this.state.clickedImage.push(currentImageId);\n\n\n       //reset state\n        this.setState({\n          clickedImage:this.state.clickedImage,\n          // increase the score\n          score: this.state.score +1,\n          topScore: (this.state.score +1 >= this.state.topScore)? this.state.score +1 : this.state.topScore\n        });\n\n\n\n        // sort the image function\n        this.shuffleImage();\n\n        // if user gets to all 12, shuffle the cards and reset the game\n        this.clickedAllImage();\n        \n        console.log(this.state.topScore);\n        console.log(currentImageId);\n        console.log(this.state.clickedImage);\n        \n      }else{\n        this.shuffleImage();\n        this.endGame();\n      }\n\n\n    };\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Header> score={this.state.score} highscore={this.state.topScore}</Header>\n        {this.state.cards.map(card => (\n          <Card\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            name={card.name}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}